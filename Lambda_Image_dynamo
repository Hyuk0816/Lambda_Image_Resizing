 import boto3
 import os
 import sys
 sys.path.append('/opt')
 import uuid
 from urllib.parse import unquote_plus
 from PIL import Image
 import PIL.Image

 # AWS 리소스 생성
 s3_client = boto3.client('s3')
 dynamodb = boto3.client('dynamodb')
 sqs = boto3.client('sqs')

 # AWS 환경 변수
 ACCESS_KEY = os.environ.get('ACCESS_KEY')
 SECRET_KEY = os.environ.get('SECRET_KEY')
 REGION_NAME = 'ap-northeast-2'

 # SQS 대기열 URL
 QUEUE_URL = '당신의 sqs 대기열 URL'

 def resize_image(image_path, resized_path):
     with Image.open(image_path) as image:
         image.thumbnail(tuple(x / 2 for x in image.size))
         image.save(resized_path)

 def process_image(bucket, key):
     try:
         tmpkey = key.replace('/', '')
         download_path = '/tmp/{}{}'.format(uuid.uuid4(), tmpkey)
         upload_path = '/tmp/resized-{}'.format(tmpkey)
         s3_client.download_file(bucket, key, download_path)
         resize_image(download_path, upload_path)
         s3_client.upload_file(upload_path, '썸네일 버킷 이름', 'resized-{}'.format(key))
         return True
     except:
         return False

 def lambda_handler(event, context):
     for record in event['Records']:
         bucket = record['s3']['bucket']['name']
         key = unquote_plus(record['s3']['object']['key'])

         if not process_image(bucket, key):
             # 이미지 리사이징 실패 시 SQS 대기열에 저장
             response = sqs.send_message(
                 QueueUrl=QUEUE_URL,
                 MessageBody=key
             )
         else:
             # 이미지 리사이징 성공 시 DynamoDB에 이미지 메타데이터 저장
             item = {
                 'name': {'S': key}

             }
             dynamodb.put_item(
                 TableName='Dynamo DB 테이블 명',
                 Item=item
             )
 위 와 같이 코드를 작성해준다.
